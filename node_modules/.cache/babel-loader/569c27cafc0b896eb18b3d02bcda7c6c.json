{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\GitHub\\\\QikChat\\\\qikchat-messenger\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nfunction App() {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]); //array to store all the messages that user send\n\n  const [username, setUsername] = useState('');\n  console.log(input);\n  console.log(messages);\n  useEffect(() => {\n    // runs only once when the app component loads\n    db.collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({\n        id: doc.id,\n        message: doc.data()\n      })));\n    });\n  }, []);\n  useEffect(() => {\n    //normal way\n    //const username = prompt('Please enter your name');\n    //react way\n    setUsername(prompt('Please enter your name'));\n  }, []);\n\n  const sendMessage = event => {\n    //prevents any automatic refresh of the page\n    event.preventDefault(); //push data to the database\n\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp() //uses the time based on the server country()\n\n    }); //all the logic to send a message goes here \n    //setMessages([...messages, {username: username, text: input}]); //using ... appends the new message to the old array,\n    //instead of replacing the old messages\n\n    setInput('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"logo-image\",\n      src: \"https://icons.iconarchive.com/icons/pelfusion/long-shadow-ios7/1024/Messages-icon.png?w=100&h=100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"app__form\",\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        className: \"app__formControl\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter a message...\",\n          value: input,\n          onChange: event => setInput(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          disabled: !input,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: sendMessage,\n          children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlipMove, {\n      children: messages.map(({\n        id,\n        message\n      }) => /*#__PURE__*/_jsxDEV(Message, {\n        username: username,\n        message: message\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this) //accessing the functionality in components\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"w94IVK8VrEYX9sBfgx2v1FCTZYA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/GitHub/QikChat/qikchat-messenger/src/App.js"],"names":["React","useState","useEffect","Button","FormControl","InputLabel","Input","Message","db","firebase","FlipMove","SendIcon","IconButton","App","input","setInput","messages","setMessages","username","setUsername","console","log","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","message","data","prompt","sendMessage","event","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0CC,KAA1C,QAAuD,mBAAvD;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC,CAFa,CAEiC;;AAC9C,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AAEAmB,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACAM,IAAAA,EAAE,CAACc,UAAH,CAAc,UAAd,EACCC,OADD,CACS,WADT,EACsB,MADtB,EAECC,UAFD,CAEYC,QAAQ,IAAI;AACtBR,MAAAA,WAAW,CAACQ,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,GAAG,KAAK;AAACC,QAAAA,EAAE,EAAED,GAAG,CAACC,EAAT;AAAaC,QAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ;AAAtB,OAAL,CAArB,CAAD,CAAX;AACD,KAJD;AAKD,GAPQ,EAON,EAPM,CAAT;AASA7B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACAiB,IAAAA,WAAW,CAACa,MAAM,CAAC,wBAAD,CAAP,CAAX;AACD,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B;AACAA,IAAAA,KAAK,CAACC,cAAN,GAF6B,CAI7B;;AACA3B,IAAAA,EAAE,CAACc,UAAH,CAAc,UAAd,EAA0Bc,GAA1B,CAA8B;AAC5BN,MAAAA,OAAO,EAAEhB,KADmB;AAE5BI,MAAAA,QAAQ,EAAEA,QAFkB;AAG5BmB,MAAAA,SAAS,EAAE5B,QAAQ,CAAC6B,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAHiB,CAG+B;;AAH/B,KAA9B,EAL6B,CAU7B;AACA;AAEA;;AACAzB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAfD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,YAAX;AAAwB,MAAA,GAAG,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BAAaG,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA,6BACA,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,kBAAvB;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,WAAW,EAAC,oBAAnB;AAAwC,UAAA,KAAK,EAAEJ,KAA/C;AAAsD,UAAA,QAAQ,EAAEoB,KAAK,IAAInB,QAAQ,CAACmB,KAAK,CAACO,MAAN,CAAaC,KAAd;AAAjF;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,QAAQ,EAAE,CAAC5B,KAAvB;AAA8B,UAAA,OAAO,EAAC,WAAtC;AAAkD,UAAA,KAAK,EAAC,SAAxD;AAAkE,UAAA,OAAO,EAAEmB,WAA3E;AAAA,iCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAJF,eAcE,QAAC,QAAD;AAAA,gBAEIjB,QAAQ,CAACW,GAAT,CAAa,CAAC;AAACE,QAAAA,EAAD;AAAKC,QAAAA;AAAL,OAAD,kBACX,QAAC,OAAD;AAAkB,QAAA,QAAQ,EAAEZ,QAA5B;AAAsC,QAAA,OAAO,EAAEY;AAA/C,SAAcD,EAAd;AAAA;AAAA;AAAA;AAAA,cADW,CAC+C;AAD5D;AAFJ;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAjEQhB,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase'; \nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]); //array to store all the messages that user send\n  const [username, setUsername] = useState('');\n\n  console.log(input);\n  console.log(messages);\n\n  useEffect(() => {\n    // runs only once when the app component loads\n    db.collection('messages')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    });\n  }, [])\n\n  useEffect(() => {\n    //normal way\n    //const username = prompt('Please enter your name');\n    //react way\n    setUsername(prompt('Please enter your name'));\n  }, [])\n\n  const sendMessage = (event) => {\n    //prevents any automatic refresh of the page\n    event.preventDefault();\n\n    //push data to the database\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp() //uses the time based on the server country()\n    })\n    //all the logic to send a message goes here \n    //setMessages([...messages, {username: username, text: input}]); //using ... appends the new message to the old array,\n\n    //instead of replacing the old messages\n    setInput('');\n  };\n\n  return (\n    <div className=\"App\">\n      <img class=\"logo-image\" src=\"https://icons.iconarchive.com/icons/pelfusion/long-shadow-ios7/1024/Messages-icon.png?w=100&h=100\"/>\n      <h2>Welcome {username}</h2>\n\n      <form className=\"app__form\">\n      <FormControl className=\"app__formControl\">\n        <Input placeholder='Enter a message...' value={input} onChange={event => setInput(event.target.value)}/>\n        <IconButton disabled={!input} variant=\"contained\" color=\"primary\" onClick={sendMessage}>\n            <SendIcon/>\n        </IconButton>\n      </FormControl>\n      </form>\n\n      {/* displays the current typed message in to the user screen */}\n      <FlipMove>\n        {\n          messages.map(({id, message}) => (\n            <Message key={id} username={username} message={message}/> //accessing the functionality in components\n          ))\n        }\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}